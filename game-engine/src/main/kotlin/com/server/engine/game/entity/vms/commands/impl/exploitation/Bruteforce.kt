package com.server.engine.game.entity.vms.commands.impl.exploitation

import com.server.engine.game.entity.vms.VirtualMachine
import com.server.engine.game.entity.vms.VirtualMachine.Companion.component
import com.server.engine.game.entity.vms.accounts.SystemAccountComponent
import com.server.engine.game.entity.vms.alert
import com.server.engine.game.entity.vms.commands.VmCommand
import com.server.engine.game.entity.vms.components.hdd.HardDriveComponent
import com.server.engine.game.entity.vms.events.impl.SystemAlert
import com.server.engine.game.entity.vms.processes.VirtualProcess
import com.server.engine.game.entity.vms.processes.VirtualProcess.Companion.NO_PROCESS
import com.server.engine.game.entity.vms.processes.VirtualProcess.Companion.singleton
import com.server.engine.game.entity.vms.processes.components.OnFinishProcessComponent
import com.server.engine.game.entity.vms.processes.components.exploitation.BruteforceComponent
import com.server.engine.game.entity.vms.software.VirtualSoftware.Companion.component
import com.server.engine.game.entity.vms.software.VirtualSoftware.Companion.has
import com.server.engine.game.entity.vms.software.component.ProcessOwnerComponent
import com.server.engine.game.entity.vms.software.component.VersionedComponent
import com.server.engine.game.entity.vms.software.isRunning
import com.xenomachina.argparser.ArgParser

class Bruteforce(
    override val args: Array<String>,
    override val parser: ArgParser,
    override val source: VirtualMachine,
    override val target: VirtualMachine
) : VmCommand {

    override val name: String = "bf"

    val username by parser.storing("-u", help = "Username to attack.")

    override suspend fun execute(): VirtualProcess {
        val sourceHDD = source.component<HardDriveComponent>()
        val cracker = sourceHDD.getBestRunningSoftware("crc")
        if(cracker == null) {
            source.alert("No Running Cracker Software found.")
            return NO_PROCESS
        }
        if(!cracker.isRunning()) {
            source.alert("No Cracker is Running.")
            return NO_PROCESS
        }
        val pc = VirtualProcess("Cracking $username at ${target.address}")
        pc.singleton<OnFinishProcessComponent>(BruteforceComponent(
            1,
            username,
            cracker,
            target
        ))
        return pc
    }
}