package com.server.engine.game.entity.vms.processes.components.exploitation

import com.server.engine.game.components.ComponentFactory
import com.server.engine.game.entity.vms.VirtualMachine
import com.server.engine.game.entity.vms.VirtualMachine.Companion.NULL_MACHINE
import com.server.engine.game.entity.vms.VirtualMachine.Companion.component
import com.server.engine.game.entity.vms.accounts.SystemAccountComponent
import com.server.engine.game.entity.vms.alert
import com.server.engine.game.entity.vms.components.hdd.HardDriveComponent
import com.server.engine.game.entity.vms.events.AlertType
import com.server.engine.game.entity.vms.processes.VirtualProcess
import com.server.engine.game.entity.vms.processes.components.OnFinishProcessComponent
import com.server.engine.game.entity.vms.setParams
import com.server.engine.game.entity.vms.software.SoftwareBuilder.Companion.software
import com.server.engine.game.entity.vms.software.VirtualSoftware
import com.server.engine.game.entity.vms.software.VirtualSoftware.Companion.NULL_SOFTWARE
import com.server.engine.game.entity.vms.software.VirtualSoftware.Companion.component
import com.server.engine.game.entity.vms.software.VirtualSoftware.Companion.has
import com.server.engine.game.entity.vms.software.component.VersionedComponent
import com.server.engine.game.entity.vms.software.version
import com.server.engine.game.world.GameWorld.Companion.vmachine
import com.server.engine.utilities.string
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.put

class BruteforceComponent(
    override var threadCost: Int,
    private var username: String = "",
    private var crackerSoft: VirtualSoftware = NULL_SOFTWARE,
    private var target: VirtualMachine = NULL_MACHINE,
) : OnFinishProcessComponent {
    override var networkCost: Int = 0
    override var ramCost: Long = 0
    override var runningTime: Long = 5000

    override suspend fun onTick(source: VirtualMachine, process: VirtualProcess) {
        if(crackerSoft === NULL_SOFTWARE || target === NULL_MACHINE) {
            return
        }
        val targetHDD = target.component<HardDriveComponent>()
        val crcVersion = crackerSoft.version
        val hashVersion = targetHDD.getBestRunningSoftware("hash")?.version ?: 0.0
        if(crcVersion < hashVersion || username.isEmpty()) {
            source.alert("Access Denied", "Bruteforce", AlertType.ACCESS_DENIED)
        } else {
            //TODO add to hacked database
            val accman = target.component<SystemAccountComponent>()
            if(accman.accounts.containsKey(username)) {
                val pass = accman.accounts[username]!!.password
                source.alert("Access Granted $pass", "Bruteforce", AlertType.ACCESS_GRANTED)
                source.setParams("remote-pass" to pass)
            } else {
                source.alert("Access Denied", "Bruteforce", AlertType.ACCESS_DENIED)
            }
        }
    }

    override fun save(): JsonObject {
        return buildJsonObject {
            put("stats", super.save())
            put("username", username)
            put("cracker", crackerSoft.saveComponents())
            put("target", target.id.toString())
        }
    }

    override fun load(json: JsonObject) {
        super.load(json["stats"]!!.jsonObject)
        username = json.string("username")
        val cracker = software()
        cracker.loadComponents(json["cracker"]!!.jsonObject)
        this.crackerSoft = cracker
        val target = vmachine(json.string("target"))
        if(target != null)
            this.target = target
    }

    companion object : ComponentFactory<BruteforceComponent> {
        override fun create(): BruteforceComponent {
            return BruteforceComponent(0)
        }
    }
}